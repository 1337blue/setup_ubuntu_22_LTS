- name: Setup working environment
  hosts: localhost
  vars:
    setup_open_ssh_server: false
    tmp_dir: /tmp/ansible
    username: "{{ lookup ('env', 'USER') }}"
    home_dir: "{{ lookup ('env', 'HOME') }}"
    minikube_version: 1.22.0-0
    vagrant_version: 2.2.10
    vscode_settings: "{{ home_dir }}/.config/Code/User/settings.json"
    terraform:
      version: 0.14.11
      env:
        version: 2.2.2
        folder: "{{ home_dir }}/.tfenv"
      github: https://github.com/terraform
      docs:
        version: 0.12.1
      lint:
        version: 0.28.1
    git:
      email: x
      username: x
    repos:
      - package:
          name: cf-cli
          repository:
            cloudfoundry-cli: deb https://packages.cloudfoundry.org/debian stable main
          public_keys:
            - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key
      - package:
          name: helm
          repository:
            helm: deb https://baltocdn.com/helm/stable/debian/ all main
          public_keys:
            - https://baltocdn.com/helm/signing.asc
      - package:
          name: opera-stable
          repository:
            opera-stable: deb [arch=i386,amd64] https://deb.opera.com/opera-stable/ stable non-free
          public_keys:
            - https://deb.opera.com/archive.key
      - package:
          name: code
          repository:
            vscode: deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main
          public_keys:
            - https://packages.microsoft.com/keys/microsoft.asc


  tasks:
    - name: Create tmp dir
      file:
        path: "{{ tmp_dir }}"
        state: directory
        mode: '0755'

    - name: Add git email
      git_config:
        name: user.email
        scope: system
        value: "{{ git.email }}"
      become: yes
      when:
        - '"@" in git.email'

    - name: Add git user name
      git_config:
        name: user.name
        scope: system
        value: "{{ git.username }}"
      become: yes
      when:
        - 'git.username | length > 1'

    - name: Set vim as default editor for git
      git_config:
        name: user.editor
        scope: system
        value: vim
      become: yes

    - name: Upgrade Packages
      apt:
        update_cache: yes
        upgrade: full
      become: yes
      register: apt_action
      retries: 100
      until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)

    - name: Install Packages
      apt:
        name: "{{ packages }}"
      become: yes
      vars:
        packages:
        - ansible-lint
        - apt-transport-https
        - build-essential
        - curl
        - direnv
        - docker.io
        - git-crypt
        - golang-go
        - hddtemp
        - htop
        - iotop
        - jq
        - keepassxc
        - liblzma-dev
        - libcurl4-openssl-dev
        - linux-headers-generic
        - lm-sensors
        - net-tools
        - openjdk-11-jdk
        - openssh-server
        - openvpn
        - patch
        - powertop
        - python3-pip
        - ruby-dev
        - ruby-libxml
        - smartmontools
        - software-properties-common
        - timewarrior
        - tree
        - vim
        - wget
        - xpaint
        - zlib1g-dev

    - name: Install pip packages
      pip:
        name:
          - awscli
          - docker-compose
          - pre-commit
          - yq

    - name: Import GPG keys
      apt_key:
        url: "{{ item.1 }}"
      become: yes
      with_subelements:
        - "{{ repos }}"
        - package.public_keys

    - name: Add apt repos
      apt_repository:
        repo: "{{ item.package.repository | dict2items | json_query('[].value') | first }}"
        filename: "{{ item.package.repository | dict2items | json_query('[].key') | first }}"
      become: yes
      with_items:
        "{{ repos }}"

    - name: Install non standard packages
      apt:
        name: "{{ item.package.name }}"
      become: yes
      with_items:
        "{{ repos }}"

    - name: Install Snap apps
      snap:
        name: "{{ item }}"
        classic: yes
        channel: 1.21/stable
      become: yes
      with_items:
        - kubectl

    # vagrant depends on virtualbox
    - name: Install Snap apps
      snap:
        name: "{{ item }}"
        classic: yes
      become: yes
      with_items:
        - notepad-plus-plus
        - slack
        - spotify

    # vagrant depends on virtualbox
    # TODO make sure to only install those if required -> avoid download of packages
    - name: Install minikube, vagrant and zoom
      apt:
        deb: "{{ item }}"
      become: yes
      with_items:
        - https://github.com/gopasspw/gopass/releases/download/v1.13.0/gopass_1.13.0_linux_amd64.deb
        - https://storage.googleapis.com/minikube/releases/latest/minikube_{{ minikube_version }}_amd64.deb
        - https://releases.hashicorp.com/vagrant/{{ vagrant_version }}/vagrant_{{ vagrant_version }}_x86_64.deb
        - https://zoom.us/client/latest/zoom_amd64.deb
      register: deb_packages

    - name: Set fact for minikube handler
      set_fact:
        minikube_changes: "{{ deb_packages.results | json_query(\
          '[?item == `https://storage.googleapis.com/minikube/\
          releases/latest/minikube_latest_amd64.deb`].changed') }}"

    - name: Is terraform installed?
      command: terraform -v
      register: is_terraform_installed
      ignore_errors: yes
      changed_when: not is_terraform_installed.rc == 0

    - name: Is tfenv installed?
      command: tfenv -v
      register: is_tfenv_installed
      ignore_errors: yes
      changed_when: not is_tfenv_installed.rc == 0

    - name: Download tfenv
      get_url:
        url: https://github.com/tfutils/tfenv/archive/refs/tags/v{{ terraform.env.version }}.zip
        dest: "{{ tmp_dir }}"
      when: (not is_tfenv_installed.rc == 0 or not terraform.env.version in is_tfenv_installed.stdout_lines[0])

    - name: Cleanup tfenv dir
      file:
        path: "{{ terraform.env.folder }}"
        state: absent
      when: (not is_tfenv_installed.rc == 0 or not terraform.env.version in is_tfenv_installed.stdout_lines[0])

    - name: Unzip tfenv
      unarchive:
        src: "{{ tmp_dir }}/tfenv-{{ terraform.env.version }}.zip"
        dest: "{{ tmp_dir }}"
        owner: "{{ username }}"
        group: "{{ username }}"
      become: yes
      when: (not is_tfenv_installed.rc == 0 or not terraform.env.version in is_tfenv_installed.stdout_lines[0])

    - name: Install tfenv
      command: "mv {{ tmp_dir }}/tfenv-{{ terraform.env.version }} {{ terraform.env.folder }}"
      when: (not is_tfenv_installed.rc == 0 or not terraform.env.version in is_tfenv_installed.stdout_lines[0])

    - name: Find tfenv binaries
      find:
        paths: "{{ terraform.env.folder }}/bin"
      register: tf_env_bins
      when: (not is_tfenv_installed.rc == 0 or not terraform.env.version in is_tfenv_installed.stdout_lines[0])

    - name: Link tfenv binaries
      file:
        src: "{{ item.path }}"
        dest: "/usr/local/bin/{{ item.path | basename }}"
        state: link
        owner: root
        group: root
      become: yes
      when: (not is_tfenv_installed.rc == 0 or not terraform.env.version in is_tfenv_installed.stdout_lines[0])
      with_items:
        - "{{ tf_env_bins.files }}"

    - name: Install terraform
      command: tfenv install {{ terraform.version }}
      when: (not is_terraform_installed.rc == 0 or not terraform.version in is_terraform_installed.stdout_lines[0])

    - name: Setup terraform
      command: tfenv use {{ terraform.version }}
      when: (not is_terraform_installed.rc == 0 or not terraform.version in is_terraform_installed.stdout_lines[0])

    - name: Is tflint installed?
      command: tflint -v
      register: is_tflint_installed
      ignore_errors: yes
      changed_when: not is_tflint_installed.rc == 0

    - name: Download tflint binary
      get_url:
        url: "{{ terraform.github }}-linters/tflint/releases/download/v{{ terraform.lint.version }}/tflint_linux_amd64.zip"
        dest: "{{ tmp_dir }}"
      when: (not is_tflint_installed.rc == 0 or not terraform.lint.version in is_tflint_installed.stdout_lines[0])

    - name: Unzip tflint
      unarchive:
        src: "{{ tmp_dir }}/tflint_linux_amd64.zip"
        dest: /usr/bin
        mode: '0755'
        owner: root
        group: root
      become: yes
      when: (not is_tflint_installed.rc == 0 or not terraform.lint.version in is_tflint_installed.stdout_lines[0])

    - name: Is terraform-docs installed?
      command: terraform-docs -v
      register: is_terraform_docs_installed
      ignore_errors: yes
      changed_when: not is_terraform_docs_installed.rc == 0

    - name: Download terraform-docs binary
      get_url:
        url: "{{ terraform.github }}-docs/terraform-docs/\
          releases/download/v{{ terraform.docs.version }}/\
          terraform-docs-v{{ terraform.docs.version }}-linux-amd64"
        dest: /usr/bin/terraform-docs
        mode: '0755'
      become: yes
      when: (not is_terraform_docs_installed.rc == 0 or not terraform.docs.version in is_terraform_docs_installed.stdout_lines[0])

    - name: fetch VS Code extensions
      command: code --list-extensions
      register: vs_code_extensions
      changed_when: false

    - name: Install VS Code extensions
      command: code --install-extension "{{ item }}"
      when: item not in vs_code_extensions.stdout
      with_items:
      - DavidAnson.vscode-markdownlint
      - dbaeumer.vscode-eslint
      - eamodio.gitlens
      - hashicorp.terraform
      - HookyQR.beautify
      - janjoerke.jenkins-pipeline-linter-connector
      - jmMeessen.jenkins-declarative-support
      - magicstack.MagicPython
      - mhutchie.git-graph
      - ms-azuretools.vscode-docker
      - ms-python.python
      - MS-vsliveshare.vsliveshare-pack
      - redhat.vscode-yaml
      - teledemic.branch-warnings
      - tht13.python
      - vivaxy.vscode-conventional-commits
      - vscodevim.vim

    - name: Check if vscode settings.json exists
      stat:
        path: "{{ vscode_settings }}"
      register: st

    - name: Copy vscode settings.json
      copy:
        src: ./conf/settings.json
        dest: "{{ vscode_settings }}"
        mode: '0644'
      when: not st.stat.exists

    - name: Increase watch limit for VSCode
      become: yes
      lineinfile:
        path: /etc/sysctl.conf
        state: present
        line: fs.inotify.max_user_watches=524288

    - name: Add direnv hook bash to bashrc
      become: yes
      lineinfile:
        path: /etc/bash.bashrc
        state: present
        line: "{{ item }}"
      loop:
        - eval "$(direnv hook bash)"
        - export PATH="$HOME/.local/bin:$PATH"
        - source <(kubectl completion bash)

    - name: Ensure group "docker" exists with correct gid
      ansible.builtin.group:
        name: docker
        state: present
        gid: 1750
      become: yes

    - name: Append the user to required groups
      ansible.builtin.user:
        name: "{{ username }}"
        groups: "{{ item }}"
        append: yes
      become: yes
      notify: Restart docker
      with_items:
      - docker

    - name: Make docker the default minikube driver
      command: minikube config set driver docker
      when: minikube_changes | bool

    - name: Allow SSH password authentication
      become: yes
      lineinfile:
        state: present
        regexp: '.*PasswordAuthentication.*'
        line: 'PasswordAuthentication yes'
        path: /etc/ssh/sshd_config
        validate: sshd -t -f %s
      notify: Enable and restart sshd
      when: setup_open_ssh_server | bool

    - name: Cleanup apt
      apt:
        autoremove: yes
        autoclean: yes
      become: yes

    - name: Cleanup tmp dir
      file:
        path: "{{ tmp_dir }}"
        state: absent
      become: yes

  handlers:
    - name: Enable and restart sshd
      service:
        name: sshd
        enabled: yes
        state: restarted
      become: yes

    - name: Restart docker
      service:
        name: docker
        enabled: yes
        state: restarted
      become: yes
