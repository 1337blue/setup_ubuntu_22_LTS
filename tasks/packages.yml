- name: Packages
  tags: packages
  block:
    - name: Upgrade Packages
      ansible.builtin.apt:
        update_cache: true
        upgrade: full
      become: true
      register: apt_action
      retries: 100
      until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)

    - name: Install Packages
      ansible.builtin.apt:
        name: "{{ packages.apt }}"
      become: true

    - name: Install pip packages
      ansible.builtin.pip:
        name: "{{ packages.pip }}"

    - name: Import GPG keys
      ansible.builtin.apt_key:
        url: "{{ item.1 }}"
      become: true
      with_subelements:
        - "{{ repos }}"
        - package.public_keys

    - name: Add apt repos
      ansible.builtin.apt_repository:
        repo: "{{ item.package.repository | dict2items | json_query('[].value') | first }}"
        filename: "{{ item.package.repository | dict2items | json_query('[].key') | first }}"
      become: true
      with_items:
        "{{ repos }}"

    - name: Install non standard packages
      ansible.builtin.apt:
        name: "{{ item.package.name }}"
      become: true
      with_items:
        "{{ repos }}"

    - name: Install Snap apps
      community.general.snap:
        name: "{{ packages.snap }}"
        classic: true
      become: true

    - name: Is kubectl installed?
      ansible.builtin.shell:
        cmd: "kubectl version --client || true"
      register: is_kubectl_installed
      changed_when: false

    - name: Set facts for installing kubectl
      ansible.builtin.set_fact:
        install_kubectl: "{{ is_kubectl_installed.stdout_lines | length == 0 or \
          not kubectl.version in is_kubectl_installed.stdout_lines[0] }}"

    - name: Install kubectl
      ansible.builtin.get_url:
        url: "{{ kubectl.url }}"
        dest: "{{ kubectl.path }}"
        owner: root
        group: root
        mode: "0755"
        checksum: "sha256:{{ kubectl.checksum }}"
      become: true
      when: install_kubectl

    # TODO make sure to only install those if required -> avoid download of packages
    - name: Install gopass, minikube, vagrant and zoom
      ansible.builtin.apt:
        deb: "{{ item }}"
      become: true
      with_items:
        - https://github.com/gopasspw/gopass/releases/download/v{{ gopass_version }}/gopass_{{ gopass_version }}_linux_amd64.deb
        - https://storage.googleapis.com/minikube/releases/latest/minikube_{{ minikube_version }}_amd64.deb
        - https://releases.hashicorp.com/vagrant/{{ vagrant_version }}/vagrant_{{ vagrant_version }}_x86_64.deb
        - https://zoom.us/client/latest/zoom_amd64.deb
      register: deb_packages
      when: not "vagrant" in item or not "guest" == ansible_facts.virtualization_role

    - name: Set fact for minikube handler
      ansible.builtin.set_fact:
        minikube_changes: "{{ deb_packages.results | json_query(\
          '[?item == `https://storage.googleapis.com/minikube/\
          releases/latest/minikube_{{ minikube_version }}_amd64.deb`].changed') }}"

    - name: Make docker the default minikube driver
      ansible.builtin.command: minikube config set driver docker
      when: minikube_changes | bool
      changed_when: true

    - name: Cleanup apt
      ansible.builtin.apt:
        autoremove: true
        autoclean: true
      become: true
