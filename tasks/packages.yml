- name: Upgrade Packages
  ansible.builtin.apt:
    update_cache: true
    upgrade: full
  become: true
  register: apt_action
  retries: 100
  until: apt_action is success or ('Failed to lock apt for exclusive operation' not in apt_action.msg and '/var/lib/dpkg/lock' not in apt_action.msg)

- name: Install Packages
  ansible.builtin.apt:
    name: "{{ apt.packages }}"
  become: true

- name: Install pip packages
  ansible.builtin.pip:
    name:
      - awscli
      - docker-compose
      - pre-commit
      - yq

- name: Import GPG keys
  ansible.builtin.apt_key:
    url: "{{ item.1 }}"
  become: true
  with_subelements:
    - "{{ repos }}"
    - package.public_keys

- name: Add apt repos
  ansible.builtin.apt_repository:
    repo: "{{ item.package.repository | dict2items | json_query('[].value') | first }}"
    filename: "{{ item.package.repository | dict2items | json_query('[].key') | first }}"
  become: true
  with_items:
    "{{ repos }}"

- name: Install non standard packages
  ansible.builtin.apt:
    name: "{{ item.package.name }}"
  become: true
  with_items:
    "{{ repos }}"

- name: Install Snap apps
  snap:
    name: "{{ snap.apps }}"
    classic: true
  become: true

- name: Is kubectl installed?
  ansible.builtin.shell:
    cmd: "kubectl version --client || true"
  register: is_kubectl_installed
  changed_when: false

- name: Set facts for installing kubectl
  ansible.builtin.set_fact:
    install_kubectl: "{{ is_kubectl_installed.stdout_lines | length == 0 or\n
      not kubectl.version in is_kubectl_installed.stdout_lines[0]}}"

- name: Install kubectl
  ansible.builtin.file:
    src: kubectl.url
    dest: kubectl.path
    owner: root
    group: root
    remote_src: true
  become: true
  when: install_kubectl

- name: Get sha256 checksum of kubectl
  ansible.builtin.stat:
    path: kubectl.path
    checksum_algorithm: sha256
    get_checksum: true
  register: kubectl_sha256

- name: Check kubectl integrity
  ansible.builtin.fail:
    msg: "kubectl integrity could not be verified!\nTry again or make sure to update checksum"
  when: kubect_sha256.checksum != kubectl.checksum

# TODO make sure to only install those if required -> avoid download of packages
- name: Install gopass, minikube, vagrant and zoom
  ansible.builtin.apt:
    deb: "{{ item }}"
  become: true
  with_items:
    - https://github.com/gopasspw/gopass/releases/download/v{{ gopass_version }}/gopass_{{ gopass_version }}_linux_amd64.deb
    - https://storage.googleapis.com/minikube/releases/latest/minikube_{{ minikube_version }}_amd64.deb
    - https://releases.hashicorp.com/vagrant/{{ vagrant_version }}/vagrant_{{ vagrant_version }}_x86_64.deb
    - https://zoom.us/client/latest/zoom_amd64.deb
  register: deb_packages

- name: Set fact for minikube handler
  ansible.builtin.set_fact:
    minikube_changes: "{{ deb_packages.results | json_query(\n
      '[?item == `https://storage.googleapis.com/minikube/\n
      releases/latest/minikube_{{ minikube_version }}_amd64.deb`].changed') }}"

- name: Make docker the default minikube driver
  ansible.builtin.command: minikube config set driver docker
  when: minikube_changes | bool
  changed_when: true

- name: Cleanup apt
  ansible.builtin.apt:
    autoremove: true
    autoclean: true
  become: true
